/**
* @file		Vector2.cpp
* @brief	2DƒxƒNƒ^
* @author	S.OIKAWA
* @date		2017.02.12
*/

#pragma region include
//-----------------------------------------------------------
// include
//-----------------------------------------------------------
#include"Vector2.h"
#include<cmath>
#include<random>
#pragma endregion

//-----------------------------------------------------------
// define
//-----------------------------------------------------------
using namespace std;
namespace Utility
{
	const Vector2 Vector2::zero = Vector2(0, 0);   //Vector2(0, 0,)
	const Vector2 Vector2::once = Vector2(1,1);	  //Vector2(1, 1,)
	const Vector2 Vector2::left = Vector2(-1,0);	  //Vector2(-1, 0)
	const Vector2 Vector2::rigth= Vector2(1,0);	  //Vector2(1, 0,)
	const Vector2 Vector2::up   = Vector2(0,1);	  //Vector2(0, 1,)
	const Vector2 Vector2::down = Vector2(0,-1);	  //Vector2(0, -1,)
	//-----------------------------------------------------------
	// ctor
	//-----------------------------------------------------------
	Vector2::Vector2():
		X(.0f),
		Y(.0f)
	{
	}

	//-----------------------------------------------------------
	// ctor
	//-----------------------------------------------------------
	Vector2::Vector2(float _x, float _y):
		X(_x),
		Y(_y)
	{
	}

	//-----------------------------------------------------------
	// Set
	//-----------------------------------------------------------
	void Vector2::Set(float _x, float _y)
	{
		X = _x;
		Y = _y;
	}

	//-----------------------------------------------------------
	// GetLength
	//-----------------------------------------------------------
	float Vector2::GetLength() const
	{
		return std::sqrtf(X*X+Y*Y);
	}

	//-----------------------------------------------------------
	// GetLengthSquared
	//-----------------------------------------------------------
	float Vector2::GetLengthSquared() const
	{
		return (X*X+Y*Y);
	}

	//-----------------------------------------------------------
	// Normalize
	//-----------------------------------------------------------
	void Vector2::Normalize()
	{
		auto lengh = GetLength();
		X /= lengh;
		Y /= lengh;
	}

	//-----------------------------------------------------------
	// Random
	//-----------------------------------------------------------
	Vector2 Vector2::Random()
	{
		random_device rd;
		mt19937 mt(rd());
		return Vector2(mt(), mt());
	}

	//-----------------------------------------------------------
	// Random
	//-----------------------------------------------------------
	Vector2 Vector2::Random(float _Min, float _Max)
	{
		random_device rd;
		mt19937 mt(rd());

		uniform_real_distribution<float> fRand(_Min, _Max);
		return Vector2(fRand(mt), fRand(mt));

	}

	//-----------------------------------------------------------
	// OnCircleRandom
	//-----------------------------------------------------------
	Vector2 Vector2::OnCircleRandom()
	{
		random_device rd;
		mt19937 mt(rd());
		uniform_real_distribution<float> fRand(-3.14f, 3.14f);
		float x = fRand(mt);
		float y = fRand(mt);

		return Vector2(
			sin(x)*cos(y),
			sin(x)*sin(y)
			);

	}

	//-----------------------------------------------------------
	// Dot
	//-----------------------------------------------------------
	float Vector2::Dot(const Vector2 & _lhv, const Vector2 & _rhv)
	{
		return (_lhv.X * _rhv.X + _lhv.Y * _rhv.Y);
	}

	//-----------------------------------------------------------
	// Cross
	//-----------------------------------------------------------
	float Vector2::Cross(const Vector2 & _lhv, const Vector2 & _rhv)
	{
		return (_lhv.X * _rhv.Y - _rhv.Y * _rhv.X);
	}

	//-----------------------------------------------------------
	// +=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator+=(const Vector2 & _v)
	{
		X += _v.X;
		Y += _v.Y;
		return *this;
	}

	//-----------------------------------------------------------
	// +=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator+=(float _v)
	{
		X +=_v;
		Y +=_v;
		return *this;
	}

	//-----------------------------------------------------------
	// -=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator-=(const Vector2 & _v)
	{
		X -= _v.X;
		Y -= _v.Y;
		return *this;
	}

	//-----------------------------------------------------------
	// -=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator-=(float _v)
	{
		X -= _v;
		Y -= _v;
		return *this;
	}

	//-----------------------------------------------------------
	// *=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator*=(const Vector2 & _v)
	{
		X *= _v.X;
		Y *= _v.Y;
		return *this;
	}

	//-----------------------------------------------------------
	// *=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator*=(float _v)
	{
		X *= _v;
		Y *= _v;
		return *this;
	}

	//-----------------------------------------------------------
	// /=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator/=(const Vector2 & _v)
	{
		X /= _v.X;
		Y /= _v.Y;
		return *this;
	}

	//-----------------------------------------------------------
	// /=
	//-----------------------------------------------------------
	Vector2 & Vector2::operator/=(float _v)
	{
		X /= _v;
		Y /= _v;
		return *this;
	}

	//-----------------------------------------------------------
	// ==
	//-----------------------------------------------------------
	bool Vector2::operator==(const Vector2 & _v) const
	{
		return (X == _v.X)&& (Y == _v.Y);
	}

	//-----------------------------------------------------------
	// !=
	//-----------------------------------------------------------
	bool Vector2::operator!=(const Vector2 & _v) const
	{
		return !((X == _v.X) && (Y == _v.Y));
	}

	//-----------------------------------------------------------
	// +
	//-----------------------------------------------------------
	Vector2 operator+(const Vector2 & _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1.X + _v2.X,
			_v1.Y + _v2.Y);
	}

	//-----------------------------------------------------------
	// +
	//-----------------------------------------------------------
	Vector2 operator+(const Vector2 & _v1, float _v2)
	{
		return Vector2(
			_v1.X + _v2,
			_v1.Y + _v2);
	}

	//-----------------------------------------------------------
	// +
	//-----------------------------------------------------------
	Vector2 operator+(float _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1 + _v2.X,
			_v1 + _v2.Y);
	}

	//-----------------------------------------------------------
	// -
	//-----------------------------------------------------------
	Vector2 operator-(const Vector2 & _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1.X - _v2.X,
			_v1.Y - _v2.Y);
	}

	//-----------------------------------------------------------
	// -
	//-----------------------------------------------------------
	Vector2 operator-(const Vector2 & _v1, float _v2)
	{
		return Vector2(
			_v1.X - _v2,
			_v1.Y - _v2);
	}

	//-----------------------------------------------------------
	// -
	//-----------------------------------------------------------
	Vector2 operator-(float _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1 - _v2.X,
			_v1 - _v2.Y);
	}

	//-----------------------------------------------------------
	// *
	//-----------------------------------------------------------
	Vector2 operator*(const Vector2 & _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1.X * _v2.X,
			_v1.Y * _v2.Y);
	}

	//-----------------------------------------------------------
	// *
	//-----------------------------------------------------------
	Vector2 operator*(const Vector2 & _v1, float _v2)
	{
		return Vector2(
			_v1.X * _v2,
			_v1.Y * _v2);
	}

	//-----------------------------------------------------------
	// *
	//-----------------------------------------------------------
	Vector2 operator*(float _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1 * _v2.X,
			_v1 * _v2.Y);
	}

	//-----------------------------------------------------------
	// /
	//-----------------------------------------------------------
	Vector2 operator/(const Vector2 & _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1.X / _v2.X,
			_v1.Y / _v2.Y);
	}

	//-----------------------------------------------------------
	// /
	//-----------------------------------------------------------
	Vector2 operator/(const Vector2 & _v1, float _v2)
	{
		return Vector2(
			_v1.X / _v2,
			_v1.Y / _v2);
	}

	//-----------------------------------------------------------
	// /
	//-----------------------------------------------------------
	Vector2 operator/(float _v1, const Vector2 & _v2)
	{
		return Vector2(
			_v1 / _v2.X,
			_v1 / _v2.Y);
	}

	//-----------------------------------------------------------
	// -
	//-----------------------------------------------------------
	Vector2 operator-(const Vector2 & _v1)
	{
		return Vector2(-_v1.X, -_v1.Y);
	}
}

//-----------------------------------------------------------
// EOF
//-----------------------------------------------------------